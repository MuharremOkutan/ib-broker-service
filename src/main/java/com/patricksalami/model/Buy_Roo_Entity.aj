// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.patricksalami.model;

import com.patricksalami.model.Buy;
import java.lang.Long;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Buy_Roo_Entity {
    
    @PersistenceContext
    transient EntityManager Buy.entityManager;
    
    @Transactional
    public void Buy.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Buy.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Buy attached = Buy.findBuy(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Buy.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Buy.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Buy Buy.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Buy merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Buy.entityManager() {
        EntityManager em = new Buy().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Buy.countBuys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Buy o", Long.class).getSingleResult();
    }
    
    public static List<Buy> Buy.findAllBuys() {
        return entityManager().createQuery("SELECT o FROM Buy o", Buy.class).getResultList();
    }
    
    public static Buy Buy.findBuy(Long id) {
        if (id == null) return null;
        return entityManager().find(Buy.class, id);
    }
    
    public static List<Buy> Buy.findBuyEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Buy o", Buy.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
